* Erlang

** VM internals

*** Schedulers

- By default it allocates 1 thread per physical execution unit (like core).
  - It sits on top of operating system abstraction.
  - Each thread executes an *emulator* which invokes your bytecode instructions.
  - You can spawn as many scheduler threads per execution unit you want, it
    depends on you if it makes sense.
- Inside scheduler there is a *run queue* in which we have processes assigned to
  that particular scheduler.
  - Each scheduler assign arbitrary amount of reductions (roughly - function
    calls) to each process from its run queue. After exhausting that limit,
    waiting for an asynchronous call (like `receive` block) or running into
    emulator trap (e.g. BIFs), process is reassigned to run queue and another
    one starts to running.

*** TODO

https://github.com/vinoski/bitwise
https://github.com/basho/enm
http://jlouisramblings.blogspot.com/2013/10/embrace-copying.html
http://webcache.googleusercontent.com/search?q=cache:TamRvo6EYBIJ:www.erlang-factory.com/upload/presentations/377/RickardGreen-NativeInterface.pdf+&cd=1&hl=en&ct=clnk&gl=pl
http://jlouisramblings.blogspot.com/2013/01/how-erlang-does-scheduling.html
https://github.com/erlang/otp/blob/maint/erts/emulator/internal_doc/ThreadProgress.md
